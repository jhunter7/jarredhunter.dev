# .github/workflows/ci-deploy.yml
name: CI • Build, Tag, Push & Deploy

permissions:
  contents: write

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: jhunter7/jhdev

jobs:
  version:
    name: Bump Version with bump2version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      # 1️⃣ Checkout full history (so we can push tags)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Configure Git for automated commit & tag
      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "actions@github.com"

      # 3️⃣ Install bump2version
      - name: Set up Python & bump2version
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install bump2version

      # 4️⃣ Bump patch version (and tag it)
      - id: bump
        name: Run bump2version
        run: |
          # BUMPLEVEL defaults to 'patch'; you can also switch to 'minor'/'major' if desired
          bump2version --allow-dirty patch
          # Capture the new tag (e.g. v0.0.7)
          NEW_TAG=$(git describe --tags --abbrev=0)
          echo "::set-output name=new_version::$NEW_TAG"

      # 5️⃣ Push both the commit (VERSION file) and the new tag
      - name: Push commit + tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:main --follow-tags

  build:
    name: Build & Push Docker Image
    needs: version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.new_version#v }}   # strip leading 'v' if you want just X.Y.Z
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-buildx-action@v2

      - name: Build & push images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.version.outputs.new_version }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    name: SSH & Rollout to K3s
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: SSH to K3s and update deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host:     ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.K3S_SERVER_USER }}
          key:      ${{ secrets.K3S_SSH_PRIVATE_KEY }}
          script: |
            TAG=${{ needs.version.outputs.new_version }}
            echo "Deploying image tag: ${TAG}"
            kubectl set image deployment/jhdev-website \
              jhdev-website=${{ env.IMAGE_NAME }}:${TAG} \
              -n jhdev
            kubectl rollout status deployment/jhdev-website \
              -n jhdev --timeout=300s
          